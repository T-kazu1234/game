// Generated by CoffeeScript 1.6.2
(function() {
  enchant();

  window.onload = function() {
    var enemies, enemyLasers, game, initEnemies, initEnemyLasers, maxLaser, maxStartLaser, rank, score, scoreLabel, stage, stageLabel, _ref, _ref1;

    game = new Game(360, 480);
    game.fps = 24;
    game.preload("images/droid.png", "images/beam.png", "images/ship.png", "images/laser.png", "images/blast.png");
    game.rootScene.backgroundColor = "black";
    score = 0;
    scoreLabel = new Label("SCORE : " + score);
    scoreLabel.font = "16px Tahoma";
    scoreLabel.color = "white";
    _ref = [10, 5], scoreLabel.x = _ref[0], scoreLabel.y = _ref[1];
    game.rootScene.addChild(scoreLabel);
    stage = 1;
    stageLabel = new Label("STAGE " + stage);
    stageLabel.font = "14px Tahoma";
    stageLabel.color = "white";
    _ref1 = [280, 450], stageLabel.x = _ref1[0], stageLabel.y = _ref1[1];
    stageLabel._style.zIndex = 100;
    game.rootScene.addChild(stageLabel);
    game.end = false;
    enemies = [];
    enemyLasers = [];
    maxLaser = 40;
    maxStartLaser = 4;
    rank = 100;
    initEnemies = function() {
      var enemy, x, y, _i, _j, _ref2;

      enemies = [];
      for (y = _i = 0; _i < 5; y = ++_i) {
        for (x = _j = 0; _j < 7; x = ++_j) {
          enemy = new Sprite(32, 32);
          enemy.image = game.assets["images/droid.png"];
          _ref2 = [x * (32 + 10), y * 32 + 30], enemy.x = _ref2[0], enemy.y = _ref2[1];
          enemy._style.zIndex = 2;
          enemy.tick = 0;
          enemies.push(enemy);
          game.rootScene.addChild(enemy);
        }
      }
      return null;
    };
    initEnemyLasers = function() {
      var enemeLasers, i, laser, _i, _ref2;

      enemeLasers = [];
      for (i = _i = 0; 0 <= maxLaser ? _i < maxLaser : _i > maxLaser; i = 0 <= maxLaser ? ++_i : --_i) {
        laser = new Sprite(4, 16);
        laser.image = game.assets["images/laser.png"];
        _ref2 = [0, -999], laser.x = _ref2[0], laser.y = _ref2[1];
        laser._style.zIndex = 1;
        enemyLasers.push(laser);
        game.rootScene.addChild(laser);
      }
      return null;
    };
    game.onload = function() {
      var beam, blast, enemyDX, enemyDY, fighter, fighter_body, _ref2, _ref3, _ref4;

      fighter = new Sprite(32, 16);
      fighter.image = game.assets["images/ship.png"];
      _ref2 = [game.width / 2, game.height - 20], fighter.x = _ref2[0], fighter.y = _ref2[1];
      fighter._style.zIndex = 1;
      game.rootScene.addChild(fighter);
      fighter_body = new Sprite(24, 10);
      fighter_body._style.zIndex = 1;
      game.rootScene.addChild(fighter_body);
      beam = new Sprite(4, 16);
      _ref3 = [fighter.x + 14, fighter.y - 8], beam.x = _ref3[0], beam.y = _ref3[1];
      beam.image = game.assets["images/beam.png"];
      beam._style.zIndex = 2;
      game.rootScene.addChild(beam);
      blast = new Sprite(32, 32);
      blast.image = game.assets["images/blast.png"];
      blast.y = -999;
      blast._style.zIndex = 10;
      game.rootScene.addChild(blast);
      game.keybind(32, "a");
      _ref4 = [3, 0], enemyDX = _ref4[0], enemyDY = _ref4[1];
      initEnemies();
      initEnemyLasers();
      return game.rootScene.addEventListener(Event.ENTER_FRAME, function() {
        var hitCheckBeam, hitCheckLaser, isStartedBeam, moveBeam, moveBlast, moveEnemies, moveEnemyLasers, moveFighter, startBeam, startBlast, startEnemyLasers;

        startEnemyLasers = function() {
          var i, pointer, _i, _ref5;

          pointer = Math.floor(Math.random() * rank);
          if (pointer >= enemies.length) {
            return;
          }
          for (i = _i = 0; 0 <= maxStartLaser ? _i < maxStartLaser : _i > maxStartLaser; i = 0 <= maxStartLaser ? ++_i : --_i) {
            if (enemyLasers[i].y < 0) {
              _ref5 = [enemies[pointer].x + 14, enemies[pointer].y + 16], enemyLasers[i].x = _ref5[0], enemyLasers[i].y = _ref5[1];
              break;
            }
          }
          return null;
        };
        moveEnemyLasers = function() {
          var laser, _i, _len;

          for (_i = 0, _len = enemyLasers.length; _i < _len; _i++) {
            laser = enemyLasers[_i];
            if (laser.y < 0) {
              continue;
            }
            laser.y += 4;
            if (laser.y > game.height) {
              laser.y = -999;
            }
          }
          return null;
        };
        isStartedBeam = function() {
          return beam.y < fighter.y - 8;
        };
        startBeam = function() {
          if ((isStartedBeam() === false) && game.input.a) {
            return beam.y -= 8;
          }
        };
        moveBeam = function() {
          if (isStartedBeam()) {
            beam.y -= 8;
            if (beam.y < -32) {
              return beam.y = fighter.y - 8;
            }
          }
        };
        moveFighter = function() {
          if (game.input.left) {
            fighter.x = Math.max(fighter.x - 4, 0);
          }
          if (game.input.right) {
            fighter.x = Math.min(fighter.x + 4, game.width - fighter.width);
          }
          if (!isStartedBeam()) {
            return beam.x = fighter.x + 14;
          }
        };
        moveEnemies = function() {
          var enemy, reverseFlag, _i, _len, _ref5, _ref6;

          reverseFlag = false;
          for (_i = 0, _len = enemies.length; _i < _len; _i++) {
            enemy = enemies[_i];
            _ref5 = [enemy.x + enemyDX, enemy.y + enemyDY], enemy.x = _ref5[0], enemy.y = _ref5[1];
            enemy.tick++;
            enemy.frame = enemy.tick >>> 4;
            if ((enemy.y > 0) && ((enemy.x < 0) || (enemy.x > 330))) {
              reverseFlag = true;
            }
            if (enemy.y > game.height - 40) {
              game.end = true;
              game.endMessage = "帝国はエイリアンに征服されました。\nスコアは " + score + " 点でした";
              return;
            }
          }
          if (reverseFlag) {
            return _ref6 = [-enemyDX, 6], enemyDX = _ref6[0], enemyDY = _ref6[1], _ref6;
          } else {
            return enemyDY = 0;
          }
        };
        hitCheckBeam = function() {
          var enemy, idx, _i, _len;

          if (!isStartedBeam()) {
            return;
          }
          for (idx = _i = 0, _len = enemies.length; _i < _len; idx = ++_i) {
            enemy = enemies[idx];
            if (beam.intersect(enemy)) {
              startBlast(enemy.x, enemy.y);
              beam.y = fighter.y - 8;
              score++;
              enemy.parentNode.removeChild(enemy);
              enemies.splice(idx, 1);
              scoreLabel.text = "SCORE : " + score;
              if (enemies.length < 1) {
                setTimeout("initEnemies()", 2000);
                maxStartLaser = Math.min(40, maxStartLaser + 4);
                rank = Math.max(rank - 10, maxStartLaser);
                stage++;
                stageLabel.text = "STAGE " + stage;
                return;
              }
            }
          }
        };
        hitCheckLaser = function() {
          var laser, _i, _len, _ref5;

          _ref5 = [fighter.x + 4, fighter.y + 6], fighter_body.x = _ref5[0], fighter_body.y = _ref5[1];
          for (_i = 0, _len = enemyLasers.length; _i < _len; _i++) {
            laser = enemyLasers[_i];
            if (laser.intersect(fighter_body)) {
              game.end = true;
              game.endMessage = "自機が破壊されました。もう駄目です。\nスコアは " + score + " 点でした";
              return;
            }
          }
        };
        startBlast = function(sx, sy) {
          var _ref5;

          _ref5 = [sx, sy], blast.x = _ref5[0], blast.y = _ref5[1];
          return blast.frame = 0;
        };
        moveBlast = function() {
          if (blast.y > 0) {
            blast.frame++;
            if (blast.frame === 8) {
              return blast.y = -999;
            }
          }
        };
        if (game.end) {
          game.rootScene.backgroundColor = "red";
          game.stop();
          alert(game.endMessage);
          return;
        }
        startBeam();
        moveBeam();
        moveFighter();
        moveEnemies();
        startEnemyLasers();
        moveEnemyLasers();
        moveBlast();
        hitCheckBeam();
        return hitCheckLaser();
      });
    };
    game.start();
    return window.initEnemies = initEnemies;
  };

}).call(this);
